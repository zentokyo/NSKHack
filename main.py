from langchain_chroma import Chroma
from langchain_core.prompts import PromptTemplate
from langchain.chains.combine_documents import create_stuff_documents_chain
from langchain_ollama import OllamaLLM
from langchain_ollama import OllamaEmbeddings
from langchain_core.documents import Document
import os
import re

CHROMA_PATH = "./db_metadata_v5"


def clean_answer(text: str) -> str:
    """–£–¥–∞–ª—è–µ—Ç —Å–∫—Ä—ã—Ç—ã–µ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è –º–æ–¥–µ–ª–∏: —Ç–µ–≥–∏ <think>, <reasoning>, –∏ —Ñ—Ä–∞–∑—ã –≤—Ä–æ–¥–µ '–î–∞–≤–∞–π—Ç–µ –ø–æ–¥—É–º–∞–µ–º'"""
    # –£–¥–∞–ª—è–µ–º —Ç–µ–≥–∏ —Ç–∏–ø–∞ <think>...</think>
    text = re.sub(r"<think>.*?</think>", "", text, flags=re.DOTALL | re.IGNORECASE)
    text = re.sub(r"<reasoning>.*?</reasoning>", "", text, flags=re.DOTALL | re.IGNORECASE)

    # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å —Ç–∏–ø–∏—á–Ω—ã—Ö —Ñ—Ä–∞–∑ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π
    lines = text.splitlines()
    filtered_lines = []
    skip_phrases = [
        "–î–∞–≤–∞–π—Ç–µ –ø–æ–¥—É–º–∞–µ–º",
        "–†–∞—Å—Å–º–æ—Ç—Ä–∏–º",
        "–®–∞–≥ 1",
        "–®–∞–≥ 2",
        "–í–æ-–ø–µ—Ä–≤—ã—Ö",
        "–í–æ-–≤—Ç–æ—Ä—ã—Ö",
        "–ò—Ç–∞–∫,",
        "–¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º,",
        "–•–æ—Ä–æ—à–æ,",
        "–ü–æ–Ω—è–ª,",
        "–Ø –≤–∏–∂—É,",
        "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º",
        "–û–±—Ä–∞—Ç–∏–º –≤–Ω–∏–º–∞–Ω–∏–µ",
        "–ö–∞–∫ –≤–∏–¥–Ω–æ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞",
        "–ù–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞",
        "–ò–∑ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞",
        "–°–Ω–∞—á–∞–ª–∞",
        "–ó–∞—Ç–µ–º",
        "–ù–∞–∫–æ–Ω–µ—Ü",
    ]

    for line in lines:
        if any(line.strip().startswith(phrase) for phrase in skip_phrases):
            continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è–º–∏
        filtered_lines.append(line)

    # –°–æ–±–∏—Ä–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ –∏ —á–∏—Å—Ç–∏–º –ø—Ä–æ–±–µ–ª—ã
    text = "\n".join(filtered_lines).strip()

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: —É–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ –±–ª–æ–∫–∏ –≤ –Ω–∞—á–∞–ª–µ/–∫–æ–Ω—Ü–µ
    text = re.sub(r"^\s*\n+", "", text)
    text = re.sub(r"\n+\s*$", "", text)

    return text


def initialize_rag():
    print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RAG-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ —Å –º–æ–¥–µ–ª—å—é qwen3:4b...")

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º Qwen3:4B —á–µ—Ä–µ–∑ Ollama ‚Äî –ë–ï–ó stop-—Ç–æ–∫–µ–Ω–æ–≤, —á—Ç–æ–±—ã –Ω–µ –æ–±—Ä–µ–∑–∞—Ç—å –æ—Ç–≤–µ—Ç
    model = OllamaLLM(
        model="qwen3:4b",
        temperature=0.2,
        num_ctx=4096,
        num_predict=2048
        # stop —É–±—Ä–∞–Ω ‚Äî —á—Ç–æ–±—ã –Ω–µ –æ–±—Ä—ã–≤–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
    )

    # –≠–º–±–µ–¥–¥–∏–Ω–≥–∏
    embedding_function = OllamaEmbeddings(model="nomic-embed-text")

    # –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã Chroma
    db = Chroma(persist_directory=CHROMA_PATH, embedding_function=embedding_function)

    # –ü—Ä–æ–º–ø—Ç
    prompt_template = PromptTemplate.from_template("""
SYSTEM:
{system_prompt}

–ö–û–ù–¢–ï–ö–°–¢ (–∏—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏, –Ω–µ —Ü–∏—Ç–∏—Ä—É–π –¥–æ—Å–ª–æ–≤–Ω–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–∫–∏):
{context}

USER:
{question}

ASSISTANT:
""")

    document_chain = create_stuff_documents_chain(llm=model, prompt=prompt_template)

    return db, document_chain


def format_context(documents):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤ –ø—Ä–æ–º–ø—Ç"""
    if not documents:
        return ""
    context_parts = []
    for i, doc in enumerate(documents):
        source = doc.metadata.get("source", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫")
        section = doc.metadata.get("law_section", doc.metadata.get("article", ""))
        part = f"[–ò—Å—Ç–æ—á–Ω–∏–∫ {i + 1}: {source} | {section}]\n{doc.page_content.strip()}"
        context_parts.append(part)
    return "\n\n---\n\n".join(context_parts)


def build_system_prompt(context_str: str) -> str:
    """–°—Ç—Ä–æ–∏—Ç system_prompt –¥–ª—è Qwen3:4b ‚Äî —Ç–æ–ª—å–∫–æ –≥–æ—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç, –±–µ–∑ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π"""
    base = """
–¢—ã ‚Äî AI-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–ª–æ—â–∞–¥–∫–∏ "–†–∞—Å–≠–ª–¢–æ—Ä–≥", —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π—Å—è –Ω–∞ –≥–æ—Å–∑–∞–∫—É–ø–∫–∞—Ö –ø–æ 223-–§–ó.
–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–æ–º–æ–≥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Ä–∞–∑–±–∏—Ä–∞—Ç—å—Å—è –≤ –∑–∞–∫–æ–Ω–µ –∏ —Ä–∞–±–æ—Ç–µ —Å–∏—Å—Ç–µ–º—ã.

–§–æ—Ä–º–∞—Ç—ã –≤–æ–ø—Ä–æ—Å–æ–≤:
1. –¢–µ—Ä–º–∏–Ω ‚Äî –¥–∞–π —á—ë—Ç–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏.
2. –ü—Ä–æ–±–ª–µ–º–∞ ‚Äî –ø—Ä–µ–¥–ª–æ–∂–∏ —Ä–µ—à–µ–Ω–∏–µ —Å –æ–ø–æ—Ä–æ–π –Ω–∞ –Ω–æ—Ä–º—ã 223-–§–ó.
3. –†–∞–±–æ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚Äî –æ–±—ä—è—Å–Ω–∏, –∫–∞–∫ –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º–µ –∏–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å–µ.

–ü—Ä–∞–≤–∏–ª–∞:
- –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–π —Ö–æ–¥ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π. –ù–µ –ø–∏—à–∏ —Ñ—Ä–∞–∑—ã –≤—Ä–æ–¥–µ "–î–∞–≤–∞–π—Ç–µ –ø–æ–¥—É–º–∞–µ–º", "–®–∞–≥ 1", "–ö–∞–∫ –≤–∏–¥–Ω–æ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞".
- –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Ç–µ–≥–∏  <think>, <reasoning> –∏ –∏–º –ø–æ–¥–æ–±–Ω—ã–µ ‚Äî –¥–∞–∂–µ –µ—Å–ª–∏ —Ö–æ—á–µ—Ç—Å—è.
- –î–∞–≤–∞–π —Å—Ä–∞–∑—É –≥–æ—Ç–æ–≤—ã–π, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏ —è—Å–Ω—ã–π –æ—Ç–≤–µ—Ç ‚Äî –∫–∞–∫ –±—É–¥—Ç–æ —Ç—ã —É–∂–µ –≤—Å—ë –æ–±–¥—É–º–∞–ª.
- –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ —Å–≤–µ–¥–µ–Ω–∏—è –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –∑–∞–∫–æ–Ω–∞.
- –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ‚Äî —Å–∫–∞–∂–∏ –æ–± —ç—Ç–æ–º –ø—Ä—è–º–æ –∏ –ø—Ä–µ–¥–ª–æ–∂–∏, –≥–¥–µ —É—Ç–æ—á–Ω–∏—Ç—å.
- –¢—ã –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç ‚Äî –æ—Ç–≤–µ—á–∞–π –¥–æ—Å—Ç—É–ø–Ω–æ, –Ω–æ —Ç–æ—á–Ω–æ. –ù–µ –¥–æ–±–∞–≤–ª—è–π –ª–∏—à–Ω–µ–≥–æ.
"""
    if context_str:
        return base + f"\n–ö–û–ù–¢–ï–ö–°–¢:\n{context_str}\n"
    else:
        return base


def main():
    try:
        db, document_chain = initialize_rag()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        docs = db.get()
        num_docs = len(docs['documents']) if 'documents' in docs else 0
        print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!")
        print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏–∑ Chroma: {num_docs}")
        print("=" * 50)
        print("-" * 50)

        chat_history = []

        while True:
            user_input = input("–í—ã: ").strip()
            if user_input.lower() in ['exit', '–≤—ã—Ö–æ–¥']:
                print("–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            if not user_input:
                continue

            # –ü–æ–∏—Å–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —á–∞–Ω–∫–æ–≤
            results = db.similarity_search(user_input, k=3)
            documents = [
                Document(page_content=doc.page_content, metadata=doc.metadata)
                for doc in results
            ]

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
            context_str = format_context(documents)

            # –°—Ç—Ä–æ–∏–º system_prompt
            system_prompt = build_system_prompt(context_str)

            # –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ü–µ–ø–æ—á–∫–∏
            inputs = {
                "question": user_input,
                "system_prompt": system_prompt,
                "context": documents
            }

            try:
                answer = document_chain.invoke(inputs)
                answer = clean_answer(answer)  # ‚Üê –ó–¥–µ—Å—å –≤—ã—Ä–µ–∑–∞–µ–º –≤—Å—ë –ª–∏—à–Ω–µ–µ

                if not answer.strip():
                    answer = "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —Å–º–æ–≥ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å."

                chat_history.append({"role": "human", "content": user_input})
                chat_history.append({"role": "assistant", "content": answer})

                print("\n–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç:\n" + answer)
                print("-" * 50)
            except Exception as e:
                print(f"\n–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")
                print("-" * 50)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {str(e)}")


if __name__ == "__main__":
    main()


# ============ –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ö–û–ú–ü–û–ù–ï–ù–¢–´ RAG ============
_db = None
_document_chain = None


def get_rag_components():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã RAG –æ–¥–∏–Ω —Ä–∞–∑ (–∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ)"""
    global _db, _document_chain
    if _db is None or _document_chain is None:
        print("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RAG –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
        _db, _document_chain = initialize_rag()
        print("‚úÖ RAG –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
    return _db, _document_chain


def ask_question(question: str) -> str:
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚Üí –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–æ—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –æ—Ç RAG-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –±—ç–∫–µ–Ω–¥–æ–º (FastAPI, Flask –∏ —Ç.–¥.).
    """
    if not question or not question.strip():
        return "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–¥–∞–π—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å."

    try:
        # –ü–æ–ª—É—á–∞–µ–º —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        db, document_chain = get_rag_components()

        # –ü–æ–∏—Å–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        results = db.similarity_search(question, k=3)
        documents = [
            Document(page_content=doc.page_content, metadata=doc.metadata)
            for doc in results
        ]

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context_str = format_context(documents)

        # –°—Ç—Ä–æ–∏–º system_prompt
        system_prompt = build_system_prompt(context_str)

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        inputs = {
            "question": question,
            "system_prompt": system_prompt,
            "context": documents
        }

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
        answer = document_chain.invoke(inputs)
        answer = clean_answer(answer)  # –£–±–∏—Ä–∞–µ–º —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç
        if not answer.strip():
            answer = "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —Å–º–æ–≥ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å."

    except Exception as e:
        answer = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {str(e)}"

    return answer